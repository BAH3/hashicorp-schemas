{
    "title": "Packer Config",
    "name": "packer-config",
    "type": "object",
    "definitions": {
        "todo": {
            "type": "string",
            "description": "This part isn't complete.  Please feel free to contribute at https://github.com/jboero/hashicorp-schemas/blob/master/JSON/packer/1.5/manifest.json",
            "default": "https://github.com/jboero/hashicorp-schemas/blob/master/JSON/nomad/0.11/config.json"
        },
        "addresses": {
            "type": "object",
            "description": "Specifies the bind address for individual network services. Any values configured in this stanza take precedence over the default bind_addr. The values support go-sockaddr/template format.",
            "properties": {
                "http": {
                    "type": "string",
                    "description": "The address the HTTP server is bound to. This is the most common bind address to change.",
                    "default": "127.0.0.1"
                },
                "rpc": {
                    "type": "string",
                    "description": "The address to bind the internal RPC interfaces to. Should be exposed only to other cluster members if possible.",
                    "default": "127.0.0.1"
                },
                "serf": {
                    "type": "string",
                    "description": "The address used to bind the gossip layer to. Both a TCP and UDP listener will be exposed on this address. Should be exposed only to other cluster members if possible.",
                    "default": "127.0.0.1"
                }
            },
            "default": {
                "http": "127.0.0.1",
                "rpc": "127.0.0.1",
                "serf": "127.0.0.1"
            }
        }
    },
    "properties": {
        "acl": {
            "type": "object",
            "description": "Specifies configuration which is specific to ACLs.",
            "default": {}
        },
        "addresses": { "$ref": "#definitions/addresses" },
        "advertise": { "$ref": "#definitions/addresses" },
        "audit": {
            "type": "object",
            "description": "The audit stanza configures the Nomad agent to configure Audit logging behavior. Audit logging is an Enterprise-only feature.",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies if audit logging should be enabled. When enabled, audit logging will occur for every request, unless it is filtered by a filter.",
                    "default": true
                },
                "sink": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "description": "Specifies the type of sink to create. Currently only \"file\" type is supported.",
                            "default": "file",
                            "enum": ["file"]
                        },
                        "delivery_guarantee": {
                            "type": "string",
                            "description": "Specifies the delivery guarantee that will be made for each audit log entry. Available options are \"enforced\" and \"best-effort\". \"enforced\" will hault request execution if the audit log event fails to be written to it's sink. \"best-effort\" will not hault request execution, meaning a request could potentially be un-audited.",
                            "default": "enforced",
                            "enum": ["best-effort", "enforced"]
                        },
                        "format": {
                            "type": "string",
                            "description": "Specifies the output format to be sent to a sink.",
                            "default": "json",
                            "enum": ["json"]
                        },
                        "path": {
                            "type": "string",
                            "description": "Specifies the path and file name to use for the audit log. By default Nomad will use it's configured data_dir for a combined path of /data_dir/audit/audit.log. If rotate_bytes or rotate_duration are set file rotation will occur. In this case the filename will be post-fixed with a timestamp \"filename-{timestamp}.log\"",
                            "default": "/var/log/nomad/audit.log"
                        },
                        "rotate_bytes": {
                            "type": "integer",
                            "description": "Specifies the number of bytes that should be written to an audit log before it needs to be rotated. Unless specified, there is no limit to the number of bytes that can be written to a log file",
                            "default": 0
                        },
                        "rotate_duration": {
                            "type": "string",
                            "description": "Specifies the maximum duration a audit log should be written to before it needs to be rotated. Must be a duration value such as 30s.",
                            "default": "24h"
                        },
                        "rotate_max_files": {
                            "type": "integer",
                            "description": "Specifies the maximum number of older audit log file archives to keep. If 0 no files are ever deleted.",
                            "default": 0
                        }
                    },
                    "filter": { "$ref": "#definitions/todo" }
                },
                "default": {
                    "enabled": true,
                    "sink": {
                        "type": "file",
                        "delivery_guarantee": "enforced",
                        "format": "json",
                        "path": "/var/log/nomad/audit.log",
                        "rotate_duration": "24h"
                    }
                }
            }
        },
        "bind_addr": {
            "type": "string",
            "description": "Specifies which address the Nomad agent should bind to for network services, including the HTTP interface as well as the internal gossip protocol and RPC mechanism. This should be specified in IP format, and can be used to easily bind all network services to the same address. It is also possible to bind the individual services to different addresses using the addresses configuration option. Dev mode (-dev) defaults to localhost. The value supports go-sockaddr/template format.",
            "default": "0.0.0.0"
        },
        "client": {
            "type": "object",
            "description": "Specifies configuration which is specific to the Nomad client.",
            "properties": {
                "alloc_dir": {
                    "type": "string",
                    "description": "Specifies the directory to use for allocation data. By default, this is the top-level data_dir suffixed with \"alloc \", like \" / opt / nomad / alloc \". This must be an absolute path.",
                    "default": "/var/lib/nomad/alloc"
                },
                "chroot_env": {
                    "type": "object",
                    "description": "Drivers based on isolated fork/exec implement file system isolation using chroot on Linux. The chroot_env map allows the chroot environment to be configured using source paths on the host operating system.",
                    "default": {
                        "/bin/ls": "bin/ls",
                        "/etc/ld.so.cache": "/etc/ld.so.cache",
                        "/lib": "/lib",
                        "/lib64": "/lib64"
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies if client mode is enabled. All other client configuration options depend on this value.",
                    "default": true
                },
                "max_kill_timeout": {
                    "type": "string",
                    "description": "Specifies the maximum amount of time a job is allowed to wait to exit. Individual jobs may customize their own kill timeout, but it may not exceed this value.",
                    "default": "30s"
                },
                "disable_remote_exec": {
                    "type": "boolean",
                    "description": "Specifies if the client should disable remote task execution to tasks running on this client.",
                    "default": false
                },
                "meta": {
                    "type": "object",
                    "description": "Specifies a key-value map that annotates with user-defined metadata.",
                    "default": { "key": "value" }
                },
                "network_interface": {
                    "type": "string",
                    "description": "Specifies the name of the interface to force network fingerprinting on. When run in dev mode, this defaults to the loopback interface. When not in dev mode, the interface attached to the default route is used. The scheduler chooses from these fingerprinted IP addresses when allocating ports for tasks. If no non-local IP addresses are found, Nomad could fingerprint link-local IPv6 addresses depending on the client's \"fingerprint.network.disallow_link_local\" configuration value.",
                    "default": "eno1"
                },
                "network_speed": {
                    "type": "integer",
                    "description": "Specifies an override for the network link speed. This value, if set, overrides any detected or defaulted link speed. Most clients can determine their speed automatically, and thus in most cases this should be left unset.",
                    "default": 0
                },
                "cpu_total_compute": {
                    "type": "integer",
                    "description": "Specifies an override for the total CPU compute. This value should be set to # Cores * Core MHz. For example, a quad-core running at 2 GHz would have a total compute of 8000 (4 * 2000). Most clients can determine their total CPU compute automatically, and thus in most cases this should be left unset.",
                    "default": 0
                },
                "memory_total_mb": {
                    "type": "integer",
                    "description": "Specifies an override for the total memory. If set, this value overrides any detected memory.",
                    "default": 0
                },
                "node_class": {
                    "type": "string",
                    "description": "Specifies an arbitrary string used to logically group client nodes by user-defined class. This can be used during job placement as a filter.",
                    "default": ""
                },
                "options": {
                    "type": "object",
                    "properties": {
                        "driver.whitelist": {
                            "type": "string",
                            "description": "Specifies a comma-separated list of whitelisted drivers . If specified, drivers not in the whitelist will be disabled. If the whitelist is empty, all drivers are fingerprinted and enabled where applicable.",
                            "default": "docker,qemu"
                        },
                        "driver.blacklist": {
                            "type": "string",
                            "description": "Specifies a comma-separated list of blacklisted drivers . If specified, drivers in the blacklist will be disabled.",
                            "default": "docker,qemu"
                        },
                        "env.blacklist": {
                            "type": "string",
                            "description": "Specifies a comma-separated list of environment variable keys not to pass to these tasks. Nomad passes the host environment variables to exec, raw_exec and java tasks. If specified, the defaults are overridden. If a value is provided, all defaults are overridden (they are not merged).",
                            "default": "MY_BLOCKED_ENVVAR"
                        },
                        "user.blacklist": {
                            "type": "string",
                            "description": "Specifies a comma-separated blacklist of usernames for which a task is not allowed to run. This only applies if the driver is included in \"user.checked_drivers\". If a value is provided, all defaults are overridden (they are not merged).",
                            "default": "root,Administrator"
                        },
                        "user.checked_drivers": {
                            "type": "string",
                            "description": "Specifies a comma-separated list of drivers for which to enforce the \"user.blacklist\". For drivers using containers, this enforcement is usually unnecessary. If a value is provided, all defaults are overridden (they are not merged).",
                            "default": "exec,raw_exec"
                        },
                        "fingerprint.whitelist": {
                            "type": "string",
                            "description": "Specifies a comma-separated list of whitelisted fingerprinters. If specified, any fingerprinters not in the whitelist will be disabled. If the whitelist is empty, all fingerprinters are used.",
                            "default": "network"
                        },
                        "fingerprint.blacklist": {
                            "type": "string",
                            "description": "Specifies a comma-separated list of blacklisted fingerprinters. If specified, any fingerprinters in the blacklist will be disabled.",
                            "default": "network"
                        },
                        "fingerprint.network.disallow_link_local": {
                            "type": "string",
                            "description": "Specifies whether the network fingerprinter should ignore link-local addresses in the case that no globally routable address is found. The fingerprinter will always prefer globally routable addresses.",
                            "default": "false"
                        }
                    },
                    "default": {
                        "driver.blacklist": "rkt,raw_exec",
                        "env.blacklist": "PASSWORD",
                        "user.blacklist": "root,Administrator"
                    }
                },
                "reserved": {
                    "type": "object",
                    "properties": {
                        "cpu": {
                            "type": "integer",
                            "description": "Specifies the amount of CPU to reserve, in MHz.",
                            "default": 0,
                            "minimum": 0
                        },
                        "memory": {
                            "type": "integer",
                            "description": "Specifies the amount of memory to reserve, in MB.",
                            "default": 0,
                            "minimum": 0
                        },
                        "disk": {
                            "type": "integer",
                            "description": "Specifies the amount of disk to reserve, in MB.",
                            "default": 0,
                            "minimum": 0
                        },
                        "reserved_ports": {
                            "type": "string",
                            "description": "Specifies a comma-separated list of ports to reserve on all fingerprinted network devices. Ranges can be specified by using a hyphen separated the two inclusive ends.",
                            "default": "3000-4000,8000"
                        }
                    },
                    "default": {
                        "cpu": 0,
                        "memory": 0,
                        "disk": 0,
                        "reserved_ports": "3000-8000,9090"
                    }
                },
                "template": {
                    "type": "object",
                    "properties": {
                        "function_blacklist": {
                            "type": "array",
                            "description": "Specifies a list of template rendering functions that should be disallowed in job specs. By default the plugin function is disallowed as it allows running arbitrary commands on the host as root (unless Nomad is configured to run as a non-root user).",
                            "default": ["plugin"]
                        },
                        "disable_file_sandbox": {
                            "type": "boolean",
                            "description": "Specifies the amount of CPU to reserve, in MHz.",
                            "default": false
                        }
                    },
                    "default": {
                        "function_blacklist": ["plugin"],
                        "disable_file_sandbox": false
                    }
                },
                "servers": {
                    "type": "string",
                    "description": "Specifies an array of addresses to the Nomad servers this client should join. This list is used to register the client with the server nodes and advertise the available resources so that the agent can receive work. This may be specified as an IP address or DNS, with or without the port. If the port is omitted, the default port of 4647 is used.",
                    "default": "127.0.0.1:4647"
                },
                "server_join": {
                    "type": "object",
                    "description": "The server_join stanza specifies how the Nomad agent will discover and connect to Nomad servers.",
                    "properties": {
                        "retry_join": {
                            "type": "array",
                            "description": "Specifies a list of server addresses to join. This is similar to start_join, but will continue to be attempted even if the initial join attempt fails, up to retry_max. Further, retry_join is available to both Nomad servers and clients, while start_join is only defined for Nomad servers. This is useful for cases where we know the address will become available eventually. Use retry_join with an array as a replacement for start_join, do not use both options.",
                            "default": ["1.1.1.1", "2.2.2.2"]
                        },
                        "retry_interval": {
                            "type": "string",
                            "description": "Specifies the time to wait between retry join attempts.",
                            "default": "30s"
                        },
                        "retry_max": {
                            "type": "integer",
                            "description": "Specifies the maximum number of join attempts to be made before exiting with a return code of 1. By default, this is set to 0 which is interpreted as infinite retries.",
                            "default": 0
                        },
                        "start_join": {
                            "type": "array",
                            "description": "Specifies a list of server addresses to join on startup. If Nomad is unable to join with any of the specified addresses, agent startup will fail. See the server address format section for more information on the format of the string. This field is defined only for Nomad servers and will result in a configuration parse error if included in a client configuration.",
                            "default": ["1.1.1.1", "2.2.2.2"]
                        }
                    },
                    "default": {}
                },
                "state_dir": {
                    "type": "string",
                    "description": "Specifies the directory to use to store client state. By default, this is - the top-level data_dir suffixed with \"client\", like \"/opt/nomad/client\". This must be an absolute path.",
                    "default": "/var/lib/nomad/client"
                },
                "gc_interval": {
                    "type": "string",
                    "description": "Specifies the interval at which Nomad attempts to garbage collect terminal allocation directories.",
                    "default": "1m"
                },
                "gc_disk_usage_threshold": {
                    "type": "number",
                    "description": "Specifies the disk usage percent which Nomad tries to maintain by garbage collecting terminal allocations.",
                    "default": 80,
                    "minimum": 0,
                    "maximum": 100
                },
                "gc_inode_usage_threshold": {
                    "type": "number",
                    "description": "Specifies the inode usage percent which Nomad tries to maintain by garbage collecting terminal allocations.",
                    "default": 70,
                    "minimum": 0,
                    "maximum": 100
                },
                "gc_max_allocs": {
                    "type": "integer",
                    "description": "Specifies the maximum number of allocations which a client will track before triggering a garbage collection of terminal allocations. This will not limit the number of allocations a node can run at a time, however after gc_max_allocs every new allocation will cause terminal allocations to be GC'd.",
                    "default": 50
                },
                "gc_parallel_destroys": {
                    "type": "integer",
                    "description": "Specifies the maximum number of parallel destroys allowed by the garbage collector. This value should be relatively low to avoid high resource usage during garbage collections.",
                    "default": 2
                },
                "no_host_uuid": {
                    "type": "boolean",
                    "description": "By default a random node UUID will be generated, but setting this to false will use the system's UUID. Before Nomad 0.6 the default was to use the system UUID.",
                    "default": true
                },
                "cni_path": {
                    "type": "string",
                    "description": "Sets the search path that is used for CNI plugin discovery. Multiple paths can be searched using colon delimited paths",
                    "default": "/opt/cni/bin"
                },
                "bridge_network_name": {
                    "type": "string",
                    "description": "Sets the name of the bridge to be created by nomad for allocations running with bridge networking mode on the client.",
                    "default": "nomad"
                },
                "bridge_network_subnet": {
                    "type": "string",
                    "description": "Specifies the subnet which the client will use to allocate IP addresses from.",
                    "default": "172.26.66.0/23"
                },
                "host_volume": {
                    "type": "string",
                    "description": "",
                    "default": ""
                }
            },
            "default": {
                "enabled": true,
                "servers": "127.0.0.1:4647",
                "options": {
                    "driver.blacklist": "rkt,raw_exec",
                    "env.blacklist": "PASSWORD",
                    "user.blacklist": "root,Administrator"
                },
                "reserved": {
                    "cpu": 0,
                    "memory": 0,
                    "disk": 0,
                    "reserved_ports": "3000-8000,9090"
                },
                "state_dir": "/var/lib/nomad/client"
            }
        },
        "consul": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Specifies the address to the local Consul agent, given in the format host:port. Supports Unix sockets with the format: unix:///tmp/consul/consul.sock. Will default to the CONSUL_HTTP_ADDR environment variable if set.",
                    "default": "127.0.0.1:8500"
                },
                "allow_unauthenticated": {
                    "type": "boolean",
                    "description": "Specifies if users submitting jobs to the Nomad server should be required to provide their own Consul token, proving they have access to the service identity policies required by the Consul Connect enabled services listed in the job. This option should be disabled in an untrusted environment.",
                    "default": true
                },
                "auth": {
                    "type": "string",
                    "description": "Specifies the HTTP Basic Authentication information to use for access to the Consul Agent, given in the format username:password.",
                    "default": "user:password"
                },
                "auto_advertise": {
                    "type": "boolean",
                    "description": "Specifies if Nomad should advertise its services in Consul. The services are named according to server_service_name and client_service_name. Nomad servers and clients advertise their respective services, each tagged appropriately with either http or rpc tag. Nomad servers also advertise a serf tagged service.",
                    "default": true
                },
                "ca_file": {
                    "type": "string",
                    "description": "Specifies an optional path to the CA certificate used for Consul communication. This defaults to the system bundle if unspecified. Will default to the CONSUL_CACERT environment variable if set.",
                    "default": "/etc/nomad/consul-ca.pem"
                },
                "cert_file": {
                    "type": "string",
                    "description": "Specifies the path to the certificate used for Consul communication. If this is set then you need to also set key_file.",
                    "default": "/etc/nomad/consul-cert.pem"
                },
                "checks_use_advertise": {
                    "type": "boolean",
                    "description": "Specifies if Consul health checks should bind to the advertise address. By default, this is the bind address.",
                    "default": false
                },
                "client_auto_join": {
                    "type": "boolean",
                    "description": "Specifies if the Nomad clients should automatically discover servers in the same region by searching for the Consul service name defined in the server_service_name option. The search occurs if the client is not registered with any servers or it is unable to heartbeat to the leader of the region, in which case it may be partitioned and searches for other servers.",
                    "default": true
                },
                "client_service_name": {
                    "type": "string",
                    "description": "Specifies the name of the service in Consul for the Nomad clients.",
                    "default": "nomad-client"
                },
                "client_http_check_name": {
                    "type": "string",
                    "description": "Specifies the HTTP health check name in Consul for the Nomad clients.",
                    "default": "Nomad Client HTTP Check"
                },
                "key_file": {
                    "type": "string",
                    "description": "Specifies the path to the private key used for Consul communication. If this is set then you need to also set cert_file.",
                    "default": "/etc/nomad/consul-key.pem"
                },
                "server_service_name": {
                    "type": "string",
                    "description": "Specifies the name of the service in Consul for the Nomad servers.",
                    "default": "nomad"
                },
                "server_http_check_name": {
                    "type": "string",
                    "description": "Specifies the HTTP health check name in Consul for the Nomad servers.",
                    "default": "Nomad Server HTTP Check"
                },
                "server_serf_check_name": {
                    "type": "string",
                    "description": "Specifies the Serf health check name in Consul for the Nomad servers.",
                    "default": "Nomad Server Serf Check"
                },
                "server_rpc_check_name": {
                    "type": "string",
                    "description": "Specifies the RPC health check name in Consul for the Nomad servers.",
                    "default": "Nomad Server RPC Check"
                },
                "server_auto_join": {
                    "type": "boolean",
                    "description": "Specifies if the Nomad servers should automatically discover and join other Nomad servers by searching for the Consul service name defined in the server_service_name option. This search only happens if the server does not have a leader.",
                    "default": true
                },
                "ssl": {
                    "type": "boolean",
                    "description": "Specifies if the transport scheme should use HTTPS to communicate with the Consul agent. Will default to the CONSUL_HTTP_SSL environment variable if set.",
                    "default": false
                },
                "tags": {
                    "type": "array",
                    "description": "Specifies optional Consul tags to be registered with the Nomad server and agent services.",
                    "default": [""],
                    "items": { "type": "string" }
                },
                "token": {
                    "type": "string",
                    "description": "Specifies the token used to provide a per-request ACL token. This option overrides the Consul Agent's default token. If the token is not set here or on the Consul agent, it will default to Consul's anonymous policy, which may or may not allow writes.",
                    "default": ""
                },
                "verify_ssl": {
                    "type": "boolean",
                    "description": "Specifies if SSL peer verification should be used when communicating to the Consul API client over HTTPS. Will default to the CONSUL_HTTP_SSL_VERIFY environment variable if set.",
                    "default": true
                }
            },
            "default": {
                "address": "127.0.0.1:8500",
                "client_auto_join": true,
                "server_auto_join": true,
                "client_service_name": "nomad-client",
                "ca_file": "/etc/nomad/consul-ca.pem",
                "ssl": true
            }
        },
        "datacenter": {
            "type": "string",
            "description": "Specifies the data center of the local agent. All members of a datacenter should share a local LAN connection.",
            "default": "dc1"
        },
        "data_dir": {
            "type": "string",
            "description": "Specifies a local directory used to store agent state. Client nodes use this directory by default to store temporary allocation data as well as cluster information. Server nodes use this directory to store cluster state, including the replicated log and snapshot data. This must be specified as an absolute path. WARNING: This directory must not be set to a directory that is included in the chroot if you use the exec driver.",
            "default": "/var/lib/nomad/data"
        },
        "disable_anonymous_signature": {
            "type": "string",
            "description": "Specifies if Nomad should provide an anonymous signature for de-duplication with the update check.",
            "default": false
        },
        "disable_update_check": {
            "type": "boolean",
            "description": "Specifies if Nomad should not check for updates and security bulletins.",
            "default": false
        },
        "enable_debug": {
            "type": "boolean",
            "description": "Specifies if the debugging HTTP endpoints should be enabled. These endpoints can be used with profiling tools to dump diagnostic information about Nomad's internals.",
            "default": false
        },
        "enable_syslog": {
            "type": "boolean",
            "description": "Specifies if the agent should log to syslog. This option only works on Unix based systems.",
            "default": false
        },
        "http_api_response_header": {
            "type": "object",
            "description": "Specifies user-defined headers to add to the HTTP API responses.",
            "default": { "header": "value" }
        },
        "leave_on_interrupt": {
            "type": "boolean",
            "description": "Specifies if the agent should gracefully leave when receiving the interrupt signal. By default, the agent will exit forcefully on any signal. This value should only be set to true on server agents if it is expected that a terminated server instance will never join the cluster again.",
            "default": false
        },
        "leave_on_terminate": {
            "type": "boolean",
            "description": "Specifies if the agent should gracefully leave when receiving the terminate signal. By default, the agent will exit forcefully on any signal. This value should only be set to true on server agents if it is expected that a terminated server instance will never join the cluster again.",
            "default": false
        },
        "limits": {
            "type": "object",
            "description": "Available in Nomad 0.10.3 and later, this is a nested object that configures limits that are enforced by the agent. The following parameters are available:",
            "properties": {
                "https_handshake_timeout": {
                    "type": "string",
                    "description": "Configures the limit for how long the HTTPS server in both client and server agents will wait for a client to complete a TLS handshake. This should be kept conservative as it limits how many connections an unauthenticated attacker can open if tls.http = true is being used (strongly recommended in production). Default value is 5s. 0 disables HTTP handshake timeouts.",
                    "default": "5s"
                },
                "http_max_conns_per_client": {
                    "type": "integer",
                    "description": "Configures a limit of how many concurrent TCP connections a single client IP address is allowed to open to the agent's HTTP server. This affects the HTTP servers in both client and server agents. Default value is 100. 0 disables HTTP connection limits.",
                    "default": 100
                },
                "rpc_handshake_timeout": {
                    "type": "string",
                    "description": "Configures the limit for how long servers will wait after a client TCP connection is established before they complete the connection handshake. When TLS is used, the same timeout applies to the TLS handshake separately from the initial protocol negotiation. All Nomad clients should perform this immediately on establishing a new connection. This should be kept conservative as it limits how many connections an unauthenticated attacker can open if TLS is being using to authenticate clients (strongly recommended in production). When tls.rpc is true on servers, this limits how long the connection and associated goroutines will be held open before the client successfully authenticates. Default value is 5s. 0 disables RPC handshake timeouts.",
                    "default": "5s"
                },
                "rpc_max_conns_per_client": {
                    "type": "integer",
                    "description": "Configures a limit of how many concurrent TCP connections a single source IP address is allowed to open to a single server. Client agents do not accept RPC TCP connections directly and therefore are not affected. It affects both clients connections and other server connections. Nomad clients multiplex many RPC calls over a single TCP connection, except for streaming endpoints such as log streaming which require their own connection when routed through servers. A server needs at least 2 TCP connections (1 Raft, 1 RPC) per peer server locally and in any federated region. Servers also need a TCP connection per routed streaming endpoint concurrently in use. Only operators use streaming endpoints; as of 0.10.3 Nomad client code does not. A reasonably low limit significantly reduces the ability of an unauthenticated attacker to consume unbounded resources by holding open many connections. You may need to increase this if WAN federated servers connect via proxies or NAT gateways or similar causing many legitimate connections from a single source IP. Default value is 100 which is designed to support the majority of users. 0 disables RPC connection limits. 26 is the minimum as 20 connections are always reserved for non-streaming connections (Raft and RPC) to ensure streaming RPCs do not prevent normal server operation. This minimum may be lowered in the future when streaming RPCs no longer require their own TCP connection.",
                    "default": 100
                }
            }
        },
        "log_level": {
            "type": "string",
            "description": "Specifies the verbosity of logs the Nomad agent will output. Valid log levels include WARN, INFO, or DEBUG in increasing order of verbosity.",
            "default": "INFO",
            "enum": ["INFO", "WARN", "DEBUG"]
        },
        "log_json": {
            "type": "boolean",
            "description": "Output logs in a JSON format.",
            "default": false
        },
        "log_file": {
            "type": "string",
            "description": "Specifies the path for logging. If the path does not includes a filename, the filename defaults to \"nomad-{timestamp}.log\". This setting can be combined with log_rotate_bytes and log_rotate_duration for a fine-grained log rotation control.",
            "default": ""
        },
        "log_rotate_bytes": {
            "type": "integer",
            "description": "Specifies the number of bytes that should be written to a log before it needs to be rotated. Unless specified, there is no limit to the number of bytes that can be written to a log file.",
            "default": 0
        },
        "log_rotate_duration": {
            "type": "string",
            "description": "Specifies the maximum duration a log should be written to before it needs to be rotated. Must be a duration value such as 30s.",
            "default": "24h"
        },
        "log_rotate_max_files": {
            "type": "integer",
            "description": "Specifies the maximum number of older log file archives to keep. If 0 no files are ever deleted.",
            "default": 0
        },
        "name": {
            "type": "string",
            "description": "Specifies the name of the local node. This value is used to identify individual agents. When specified on a server, the name must be unique within the region.",
            "default": "hostname"
        },
        "plugin_dir": {
            "type": "string",
            "description": "Specifies the directory to use for looking up plugins. By default, this is the top-level data_dir suffixed with \"plugins\", like \"/opt/nomad/plugins\". This must be an absolute path.",
            "default": "/var/lib/nomad/plugins"
        },
        "plugin": { "$ref": "#definitions/todo" },
        "ports": {
            "type": "object",
            "description": "Specifies the network ports used for different services required by the Nomad agent.",
            "properties": {
                "http": {
                    "type": "integer",
                    "description": "The port used to run the HTTP server.",
                    "default": 4646
                },
                "rpc": {
                    "type": "integer",
                    "description": "The port used for internal RPC communication between agents and servers, and for inter-server traffic for the consensus algorithm (raft).",
                    "default": 4647
                },
                "serf": {
                    "type": "integer",
                    "description": "The port used for the gossip protocol for cluster membership. Both TCP and UDP should be routable between the server nodes on this port.",
                    "default": 4648
                }
            },
            "default": {
                "http": 4646,
                "rpc": 4647,
                "serf": 4648
            }
        },
        "region": {
            "type": "string",
            "description": "Specifies the region the Nomad agent is a member of. A region typically maps to a geographic region, for example us, with potentially multiple zones, which map to datacenters such as us-west and us-east.",
            "default": "global"
        },
        "sentinel": { "$ref": "#definitions/todo" },
        "syslog_facility": {
            "type": "string",
            "description": "Specifies the syslog facility to write to. This has no effect unless enable_syslog is true.",
            "default": "LOCAL0"
        },
        "tls": {
            "type": "object",
            "description": "Specifies configuration for TLS.",
            "properties": {
                "ca_file": {
                    "type": "string",
                    "description": "Specifies the path to the CA certificate to use for Nomad's TLS communication.",
                    "default": "/path/to/your/ca.pem"
                },
                "cert_file": {
                    "type": "string",
                    "description": "Specifies the path to the certificate file used for Nomad's TLS communication.",
                    "default": "/path/to/your/cert.pem"
                },
                "key_file": {
                    "type": "string",
                    "description": "Specifies the path to the key file to use for Nomad's TLS communication.",
                    "default": "/path/to/your/key.pem"
                },
                "http": {
                    "type": "boolean",
                    "description": "Specifies if TLS should be enabled on the HTTP endpoints on the Nomad agent, including the API.",
                    "default": false
                },
                "rpc": {
                    "type": "boolean",
                    "description": "Specifies if TLS should be enabled on the RPC endpoints and Raft traffic between the Nomad servers. Enabling this on a Nomad client makes the client use TLS for making RPC requests to the Nomad servers.",
                    "default": false
                },
                "rpc_upgrade_mode": {
                    "type": "boolean",
                    "description": "This option should be used only when the cluster is being upgraded to TLS, and removed after the migration is complete. This allows the agent to accept both TLS and plaintext traffic.",
                    "default": false
                },
                "tls_cipher_suites": {
                    "type": "string",
                    "description": "Specifies the TLS cipher suites that will be used by the agent as a comma-separated string. Known insecure ciphers are disabled (3DES and RC4). By default, an agent is configured to use TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305, TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 and TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256.",
                    "default": "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256."
                },
                "tls_min_version": {
                    "type": "string",
                    "description": "Specifies the minimum supported version of TLS. Accepted values are \"tls10\", \"tls11\", \"tls12\".",
                    "default": "tls12",
                    "enum": ["tls10", "tls11", "tls12"]
                },
                "tls_prefer_server_cipher_suites": {
                    "type": "boolean",
                    "description": "Specifies whether TLS connections should prefer the server's ciphersuites over the client's.",
                    "default": false
                },
                "verify_https_client": {
                    "type": "boolean",
                    "description": "Specifies agents should require client certificates for all incoming HTTPS requests. The client certificates must be signed by the same CA as Nomad.",
                    "default": false
                },
                "verify_server_hostname": {
                    "type": "boolean",
                    "description": "Specifies if outgoing TLS connections should verify the server's hostname.",
                    "default": false
                }
            },
            "default": {
                "http": true,
                "rpc": true,
                "ca_file": "/etc/certs/ca.crt",
                "cert_file": "/etc/certs/nomad.crt",
                "key_file": "/etc/certs/nomad.key"
            }
        },
        "vault": {
            "type": "object",
            "description": "The vault stanza configures Nomad's integration with HashiCorp's Vault. When configured, Nomad can create and distribute Vault tokens to tasks automatically. For more information on the architecture and setup, please see the Nomad and Vault integration documentation.",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Specifies the address to the Vault server. This must include the protocol, host/ip, and port given in the format protocol://host:port. If your Vault installation is behind a load balancer, this should be the address of the load balancer.",
                    "default": "https://vault.service.consul:8200"
                },
                "allow_unauthenticated": {
                    "type": "boolean",
                    "description": "Specifies if users submitting jobs to the Nomad server should be required to provide their own Vault token, proving they have access to the policies listed in the job. This option should be disabled in an untrusted environment.",
                    "default": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies if the Vault integration should be activated.",
                    "default": false
                },
                "create_from_role": {
                    "type": "string",
                    "description": "Specifies the role to create tokens from. The token given to Nomad does not have to be created from this role but must have \"update\" capability on \"auth/token/create/<create_from_role>\" path in Vault. If this value is unset and the token is created from a role, the value is defaulted to the role the token is from. This is largely for backwards compatibility. It is recommended to set the create_from_role field if Nomad is deriving child tokens from a role.",
                    "default": ""
                },
                "task_token_ttl": {
                    "type": "string",
                    "description": "Specifies the TTL of created tokens when using a root token.",
                    "default": "1h"
                },
                "ca_file": {
                    "type": "string",
                    "description": "Specifies an optional path to the CA certificate used for Vault communication. If unspecified, this will fallback to the default system CA bundle, which varies by OS and version.",
                    "default": "/etc/nomad/vault-ca.pem"
                },
                "ca_path": {
                    "type": "string",
                    "description": "Specifies an optional path to a folder containing CA certificates to be used for Vault communication. If unspecified, this will fallback to the default system CA bundle, which varies by OS and version.",
                    "default": "/etc/nomad/vault-certs/"
                },
                "cert_file": {
                    "type": "string",
                    "description": "Specifies the path to the certificate used for Vault communication. If this is set then you need to also set tls_key_file.",
                    "default": "/etc/nomad/vault-cert.pem"
                },
                "key_file": {
                    "type": "string",
                    "description": "Specifies the path to the private key used for Vault communication. If this is set then you need to also set cert_file.",
                    "default": "/etc/nomad/vault-key.pem"
                },
                "namespace": {
                    "type": "string",
                    "description": "Specifies the Vault namespace used by the Vault integration. If non-empty, this namespace will be used on all Vault API calls.",
                    "default": ""
                },
                "tls_server_name": {
                    "type": "string",
                    "description": "Specifies an optional string used to set the SNI host when connecting to Vault via TLS.",
                    "default": ""
                },
                "tls_skip_verify": {
                    "type": "boolean",
                    "description": "Specifies if SSL peer validation should be enforced.",
                    "default": false
                },
                "token": {
                    "type": "string",
                    "description": "Specifies the parent Vault token to use to derive child tokens for jobs requesting tokens. Visit the Vault Integration Guide to see how to generate an appropriate token in Vault.",
                    "default": ""
                }
            },
            "default": {
                "address": "https://vault.service.consul:8200",
                "allow_unauthenticated": true,
                "enabled": true,
                "create_from_role": "vault-role",
                "task_token_ttl": "1h",
                "ca_file": "/etc/nomad/vault-ca.pem",
                "namespace": "vault",
                "tls_skip_verify": false,
                "token": "YOURTOKEN"
            }
        },
        "": {
            "type": "string",
            "description": "",
            "default": ""
        }
    }
}